node {
    stage('Build') {
        docker.image('python:2-alpine').inside {
            sh 'python -m py_compile sources/add2vals.py sources/calc.py'
            stash(name: 'compiled-sources', includes: 'sources/*.py*')
        }
    }

    stage('Test') {
        docker.image('qnib/pytest').inside {
            sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
        }
        junit 'test-reports/results.xml'
    }

    stage('Deliver') {
        def image = 'cdrx/pyinstaller-linux:python2'
        def successFlag = true
        try {
            dir(env.BUILD_ID) {
                unstash 'compiled-sources'
                sh "docker run --rm -v ./sources:/src ${image} 'pyinstaller -F add2vals.py'"
            }
        } catch (Exception e) {
            successFlag = false
            throw e
        } finally {
            if (successFlag) {
                archiveArtifacts artifacts: "${env.BUILD_ID}/sources/dist/add2vals", fingerprint: true
                dir(env.BUILD_ID) {
                    sh "docker run --rm -v ./sources:/src ${image} 'rm -rf build dist'"
                }
            }
        }
    }
    stage('Publish') {
        def GITHUB_USERNAME = credentials('github-user-name')
        def GITHUB_REPO = credentials('github-repo-name')
        def GITHUB_TOKEN = credentials('github-token-id')
        def GIT_USERNAME = credentials('git-user-name')
        def GIT_EMAIL = credentials('git-user-email')
        def RELEASE_NAME = 'v1.0.0'

        def existingRelease = sh(script: "curl -sSL -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer ${GITHUB_TOKEN}' -H 'X-GitHub-Api-Version: 2022-11-28' https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/releases", returnStdout: true).trim()

        if (existingRelease) {
            def latestTag = findLatestTag(existingRelease)
            RELEASE_NAME = getNextReleaseName(latestTag)
        }

        dir(env.BUILD_ID) {
            sh "cp -r sources/dist/add2vals ."

            def release = sh(script: "curl -XPOST -H 'Authorization:token ${GITHUB_TOKEN}' --data '{\"tag_name\":\"${RELEASE_NAME}\",\"target_commitish\":\"master\",\"name\":\"${RELEASE_NAME}\",\"body\":\"Description of the release\",\"draft\":false,\"prerelease\":false,\"generate_release_notes\":false}' https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/releases", returnStdout: true).trim()

            def id = extractReleaseId(release)

            sh "echo \"${id}\""

            sh "curl -X POST -H \"Authorization: Bearer ${GITHUB_TOKEN}\" -H \"Content-Type: application/octet-stream\" --data-binary @add2vals https://uploads.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/releases/${id}/assets?name=add2vals"
        }
    }
}

def findLatestTag(existingRelease) {
    def releases = new groovy.json.JsonSlurper().parseText(existingRelease)
    def latestTag = releases.find { release -> release.tag_name }?.tag_name
    return latestTag ?: ''
}

def getNextReleaseName(latestTag) {
    if (latestTag) {
        def versionParts = latestTag.tokenize('.')
        int lastPart = versionParts.last().toInteger()
        versionParts[versionParts.size() - 1] = (lastPart + 1).toString()
        return versionParts.join('.')
    } else {
        return RELEASE_NAME
    }
}

def extractReleaseId(json) {
    def response = new groovy.json.JsonSlurper().parseText(json)
    def id = response.id
    return id.toString().trim()
}